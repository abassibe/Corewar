	if (lst->long_opt == 0 && lst->long_preci == 0 && lst->l_hexa == 0)
	tmp = ft_strnew(lst->len_str + 2);
	if (lst->long_opt > lenght && lst->long_opt > lst->long_preci &&
			(lst->zero == 1 && lst->diez == 1))
		lst->len_str -= 2;
	while (i < lst->len_str + 2)
		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
			tmp[i++] = lst->str_nb[j++];
	ft_strdel(&lst->str_nb);
	lst->str_nb = tmp;
	if (lst->diez == 1)
		lst->len_str_conv += 2;
	tmp = ft_strnew(lst->len_str);
	while (j < lst->len_str_conv)
		tmp[i++] = lst->str_nb[j++];
	while (i < lst->len_str)
	ft_strdel(&lst->str_nb);
	lst->str_nb = tmp;
	if (lst->long_opt == 0)
	tmp = ft_strnew(lst->len_str);
	while (i < lst->len_str)
		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
			tmp[i++] = lst->str_nb[j++];
	ft_strdel(&lst->str_nb);
	lst->str_nb = tmp;
	if (lst->long_preci == -1 &&
			(lst->long_opt > lst->len_str_conv && lst->zero == 1))
		lst->len_str_conv = lst->long_opt;
	if (lst->long_preci == 0 && lst->l_hexa == 0)
		ft_strdel(&lst->str_nb);
		lst->str_nb = ft_strnew(0);
		tmp = ft_strnew(lst->len_str_conv);
	while (i < lst->len_str_conv)
		if (i < (lst->len_str_conv - (int)ft_strlen(lst->str_nb)))
			tmp[i++] = lst->str_nb[j++];
	ft_strdel(&lst->str_nb);
	lst->str_nb = tmp;
	lenght = lst->len_str_conv;
	lst->len_str_conv = (int)ft_strlen(lst->str_nb);
	if (lst->long_preci > lst->len_str_conv)
		lst->len_str_conv = lst->long_preci;
	lst->len_str = lst->len_str_conv;
	if (lst->long_opt > lst->len_str)
		lst->len_str = lst->long_opt;
	if (lst->diez == 1 && lst->l_hexa != 0)
		lst->str_nb = ft_strjoinfn("0x", lst->str_nb);
	if (lst->less == 1)
	else if (lst->diez == 1)
	lst->str = lst->str_nb;
	lst->len_str_conv = (int)ft_strlen(lst->str);
